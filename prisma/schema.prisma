// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  SAD
  ANGRY
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  mobile String @unique
  avatar String?
  password String
  fullname String

  senderId Message[] @relation("SentMessages")
  receiverId Message[] @relation("ReceiveMessages")
  hanstag Hanstag[]
  Blogs Blog[]
  statuss Status[]
  reacts React[]

  sessions Session[] @relation("Session")
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

model Message {
  id Int @id @default(autoincrement())

  senderId Int
  userSenderId User @relation("SentMessages", fields: [senderId], references: [id])

  receiverId Int
  userReceiverId User @relation("ReceiveMessages", fields: [receiverId], references: [id])

  text String?
  picture String?

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

model Session {
  id Int @id @default(autoincrement())
  device_id Int
  device Device @relation(fields: [device_id], references: [id])

  user_id Int
  userSession User @relation("Session" ,fields: [user_id], references: [id])

  refresh_token String
  exp Float // Time of token
  revoked Boolean @default(false)
  createdAt DateTime @default(now())
}

model Device {
  id Int @id @default(autoincrement())

  name String
  session Session[]
}

model Blog {
  id Int @id @default(autoincrement())

  header String @unique
  description String 
  pic_of_blog String

  hanstags Hanstag[]
  reacts React[]
  user_id Int
  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

model Status {
  id Int @id @default(autoincrement())

  user_id Int
  user User @relation(fields: [user_id], references: [id])
  text String
  pic_of_status String?

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime? 
}

model React {
  id Int @id @default(autoincrement())

  blog_id Int
  blog Blog @relation(fields: [blog_id], references: [id])

  user_id Int 
  user User @relation(fields: [user_id], references: [id])

  type ReactionType?
  createdAt DateTime
}

model comment {
  id Int @id @default(autoincrement())
}

model Hanstag {
  id Int @id @default(autoincrement())

  name String
  blog_id Int
  blog Blog @relation(fields: [blog_id], references: [id])

  user_id Int
  user User @relation(fields: [user_id], references: [id])
}